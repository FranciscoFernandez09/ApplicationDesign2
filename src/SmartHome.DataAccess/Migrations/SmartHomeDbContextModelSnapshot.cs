// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SmartHome.DataAccess.Contexts;

#nullable disable

namespace SmartHome.DataAccess.Migrations
{
    [DbContext(typeof(SmartHomeDbContext))]
    partial class SmartHomeDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("SmartHome.BusinessLogic.Domain.Company", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Logo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Rut")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ValidatorId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("SmartHome.BusinessLogic.Domain.EFCoreClasses.HomeMemberNotification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("HomeMemberId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("NotificationId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("HomeMemberId");

                    b.HasIndex("NotificationId");

                    b.ToTable("HomeMemberNotifications");
                });

            modelBuilder.Entity("SmartHome.BusinessLogic.Domain.EFCoreClasses.MemberHomePermission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MemberId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PermissionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("MemberId");

                    b.HasIndex("PermissionId");

                    b.ToTable("MemberHomePermission");
                });

            modelBuilder.Entity("SmartHome.BusinessLogic.Domain.HomeManagement.Home", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AddressNumber")
                        .HasColumnType("int");

                    b.Property<string>("AddressStreet")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Latitude")
                        .HasColumnType("int");

                    b.Property<int>("Longitude")
                        .HasColumnType("int");

                    b.Property<int>("MaxMembers")
                        .HasColumnType("int");

                    b.Property<int>("MembersCount")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("Homes");
                });

            modelBuilder.Entity("SmartHome.BusinessLogic.Domain.HomeManagement.HomeDevice", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DeviceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("HomeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsConnected")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("RoomId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasAlternateKey("HomeId", "DeviceId");

                    b.HasIndex("DeviceId");

                    b.HasIndex("RoomId");

                    b.ToTable("HomeDevice");
                });

            modelBuilder.Entity("SmartHome.BusinessLogic.Domain.HomeManagement.HomeMember", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("HomeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("ShouldNotify")
                        .HasColumnType("bit");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasAlternateKey("HomeId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("HomeMembers");
                });

            modelBuilder.Entity("SmartHome.BusinessLogic.Domain.HomeManagement.HomePermission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("HomePermissions");

                    b.HasData(
                        new
                        {
                            Id = new Guid("45678901-4567-4567-4567-1234567890ab"),
                            Name = "AddSmartDevice"
                        },
                        new
                        {
                            Id = new Guid("67890123-6789-6789-6789-1234567890ab"),
                            Name = "GetHomeDevices"
                        },
                        new
                        {
                            Id = new Guid("b3eee8dd-4c5f-4b8e-9a2e-1f3b5d6a7c8e"),
                            Name = "AddDeviceToRoom"
                        });
                });

            modelBuilder.Entity("SmartHome.BusinessLogic.Domain.HomeManagement.Room", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("HomeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("HomeId");

                    b.ToTable("Rooms");
                });

            modelBuilder.Entity("SmartHome.BusinessLogic.Domain.Notification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Event")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EventDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("HomeDeviceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("HomeDeviceId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("SmartHome.BusinessLogic.Domain.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("12345678-1234-1234-1234-1234567890ab"),
                            Name = "Admin"
                        },
                        new
                        {
                            Id = new Guid("34567890-3456-3456-3456-1234567890ab"),
                            Name = "HomeOwner"
                        },
                        new
                        {
                            Id = new Guid("23456789-2345-2345-2345-1234567890ab"),
                            Name = "CompanyOwner"
                        },
                        new
                        {
                            Id = new Guid("45678901-4567-4567-4567-123456789aab"),
                            Name = "AdminHomeOwner"
                        },
                        new
                        {
                            Id = new Guid("41111111-4567-4567-4567-123456789aab"),
                            Name = "CompanyAndHomeOwner"
                        });
                });

            modelBuilder.Entity("SmartHome.BusinessLogic.Domain.Session", b =>
                {
                    b.Property<Guid>("SessionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("SessionId");

                    b.HasIndex("UserId");

                    b.ToTable("Sessions");
                });

            modelBuilder.Entity("SmartHome.BusinessLogic.Domain.SmartDevices.DeviceImage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsMain")
                        .HasColumnType("bit");

                    b.Property<Guid?>("SmartDeviceId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SmartDeviceId");

                    b.ToTable("DeviceImages");
                });

            modelBuilder.Entity("SmartHome.BusinessLogic.Domain.SmartDevices.SmartDevice", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompanyOwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DeviceType")
                        .HasColumnType("int");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyOwnerId");

                    b.ToTable("SmartDevices");

                    b.HasDiscriminator().HasValue("SmartDevice");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("SmartHome.BusinessLogic.Domain.SystemPermission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("SystemPermissions");

                    b.HasData(
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-1234567890ab"),
                            Name = "CreateAdmin"
                        },
                        new
                        {
                            Id = new Guid("22222222-2222-2222-2222-1234567890ab"),
                            Name = "DeleteAdmin"
                        },
                        new
                        {
                            Id = new Guid("33333333-3333-3333-3333-1234567890ab"),
                            Name = "CreateCompanyOwner"
                        },
                        new
                        {
                            Id = new Guid("44444444-4444-4444-4444-1234567890ab"),
                            Name = "GetUsers"
                        },
                        new
                        {
                            Id = new Guid("90123456-9012-9012-9012-1234567890ab"),
                            Name = "ModifyAdminRole"
                        },
                        new
                        {
                            Id = new Guid("55555555-5555-5555-5555-1234567890ab"),
                            Name = "GetCompanies"
                        },
                        new
                        {
                            Id = new Guid("66666666-6666-6666-6666-1234567890ab"),
                            Name = "CreateCompany"
                        },
                        new
                        {
                            Id = new Guid("77777777-7777-7777-7777-1234567890ab"),
                            Name = "CreateDevice"
                        },
                        new
                        {
                            Id = new Guid("01234567-0123-0123-0123-1234567890ab"),
                            Name = "ModifyCompanyOwnerRole"
                        },
                        new
                        {
                            Id = new Guid("99999999-9999-9999-9999-1234567890ab"),
                            Name = "CreateHome"
                        },
                        new
                        {
                            Id = new Guid("12345678-1234-1234-1234-1234567890ab"),
                            Name = "AddHomePermission"
                        },
                        new
                        {
                            Id = new Guid("23456789-2345-2345-2345-1234567890ab"),
                            Name = "GetNotifications"
                        },
                        new
                        {
                            Id = new Guid("34567890-3456-3456-3456-1234567890ab"),
                            Name = "AddMember"
                        },
                        new
                        {
                            Id = new Guid("45678901-4567-4567-4567-1234567890ab"),
                            Name = "AddSmartDevice"
                        },
                        new
                        {
                            Id = new Guid("56789012-5678-5678-5678-1234567890ab"),
                            Name = "GetHomeMembers"
                        },
                        new
                        {
                            Id = new Guid("67890123-6789-6789-6789-1234567890ab"),
                            Name = "GetHomeDevices"
                        },
                        new
                        {
                            Id = new Guid("78901234-7890-7890-7890-1234567890ab"),
                            Name = "ActivateMemberNotification"
                        },
                        new
                        {
                            Id = new Guid("89012345-8901-8901-8901-1234567890ab"),
                            Name = "DeactivateMemberNotification"
                        },
                        new
                        {
                            Id = new Guid("12345678-1234-1234-1234-1234567aaaab"),
                            Name = "ModifyHomeName"
                        },
                        new
                        {
                            Id = new Guid("b3e1a8d2-4c5f-4b8e-9a2e-1f3b5d6a7c8e"),
                            Name = "ModifyHomeDeviceName"
                        },
                        new
                        {
                            Id = new Guid("b3eee8d2-4c5f-4b8e-9a2e-1f3b5d6a7c8e"),
                            Name = "AddRoom"
                        },
                        new
                        {
                            Id = new Guid("b3eee8dd-4c5f-4b8e-9a2e-1f3b5d6a7c8e"),
                            Name = "AddDeviceToRoom"
                        },
                        new
                        {
                            Id = new Guid("d2f1e8a4-3b6e-4b8e-9a2e-1f3b5d6a7c8e"),
                            Name = "GetHomes"
                        });
                });

            modelBuilder.Entity("SmartHome.BusinessLogic.Domain.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("HasCompany")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfileImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000001"),
                            CreatedAt = new DateTime(2024, 10, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "superadmin@gmail.com",
                            HasCompany = false,
                            LastName = "SuperAdmin",
                            Name = "SuperAdmin",
                            Password = "Super-Admin1",
                            RoleId = new Guid("12345678-1234-1234-1234-1234567890ab")
                        });
                });

            modelBuilder.Entity("SmartHome.DataAccess.EFCoreClasses.RoleSystemPermission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PermissionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PermissionId");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleSystemPermission");

                    b.HasData(
                        new
                        {
                            Id = new Guid("08129fcb-bb32-4440-9d6d-daf74040c137"),
                            PermissionId = new Guid("11111111-1111-1111-1111-1234567890ab"),
                            RoleId = new Guid("12345678-1234-1234-1234-1234567890ab")
                        },
                        new
                        {
                            Id = new Guid("0b66a103-82fe-4b3c-8046-e7c09f9ff094"),
                            PermissionId = new Guid("22222222-2222-2222-2222-1234567890ab"),
                            RoleId = new Guid("12345678-1234-1234-1234-1234567890ab")
                        },
                        new
                        {
                            Id = new Guid("10af3fc3-7a3f-4c21-b535-2e15f231caf3"),
                            PermissionId = new Guid("33333333-3333-3333-3333-1234567890ab"),
                            RoleId = new Guid("12345678-1234-1234-1234-1234567890ab")
                        },
                        new
                        {
                            Id = new Guid("13fbcb26-eccc-41cb-a4d0-203c8039aeab"),
                            PermissionId = new Guid("44444444-4444-4444-4444-1234567890ab"),
                            RoleId = new Guid("12345678-1234-1234-1234-1234567890ab")
                        },
                        new
                        {
                            Id = new Guid("5030f84f-e0fb-43ba-b3b8-3363dccf213d"),
                            PermissionId = new Guid("55555555-5555-5555-5555-1234567890ab"),
                            RoleId = new Guid("12345678-1234-1234-1234-1234567890ab")
                        },
                        new
                        {
                            Id = new Guid("f7b3b3b3-3b3b-3b3b-3b3b-3b3b3b3b3b3b"),
                            PermissionId = new Guid("90123456-9012-9012-9012-1234567890ab"),
                            RoleId = new Guid("12345678-1234-1234-1234-1234567890ab")
                        },
                        new
                        {
                            Id = new Guid("5ee2f16e-8c00-494a-98b4-ca24e354ec35"),
                            PermissionId = new Guid("66666666-6666-6666-6666-1234567890ab"),
                            RoleId = new Guid("23456789-2345-2345-2345-1234567890ab")
                        },
                        new
                        {
                            Id = new Guid("8bd3fb56-6430-48e1-b955-8b6fcd7f6544"),
                            PermissionId = new Guid("77777777-7777-7777-7777-1234567890ab"),
                            RoleId = new Guid("23456789-2345-2345-2345-1234567890ab")
                        },
                        new
                        {
                            Id = new Guid("f7a3a3b3-3b3b-3b3b-3b3b-3b3b3b3b3b3b"),
                            PermissionId = new Guid("01234567-0123-0123-0123-1234567890ab"),
                            RoleId = new Guid("23456789-2345-2345-2345-1234567890ab")
                        },
                        new
                        {
                            Id = new Guid("9f407a6c-95c2-4fee-bdc6-4a8aeb8181e9"),
                            PermissionId = new Guid("99999999-9999-9999-9999-1234567890ab"),
                            RoleId = new Guid("34567890-3456-3456-3456-1234567890ab")
                        },
                        new
                        {
                            Id = new Guid("a01983cf-6fc8-479f-9eba-7c0647e9cd5f"),
                            PermissionId = new Guid("12345678-1234-1234-1234-1234567890ab"),
                            RoleId = new Guid("34567890-3456-3456-3456-1234567890ab")
                        },
                        new
                        {
                            Id = new Guid("a6a4097e-eb63-41ba-9d57-c7df777e3218"),
                            PermissionId = new Guid("23456789-2345-2345-2345-1234567890ab"),
                            RoleId = new Guid("34567890-3456-3456-3456-1234567890ab")
                        },
                        new
                        {
                            Id = new Guid("b65f7a2f-a549-4fa2-974d-d6e073707ded"),
                            PermissionId = new Guid("34567890-3456-3456-3456-1234567890ab"),
                            RoleId = new Guid("34567890-3456-3456-3456-1234567890ab")
                        },
                        new
                        {
                            Id = new Guid("d03f54ec-1562-4c3f-a763-02da0fb8d2f3"),
                            PermissionId = new Guid("45678901-4567-4567-4567-1234567890ab"),
                            RoleId = new Guid("34567890-3456-3456-3456-1234567890ab")
                        },
                        new
                        {
                            Id = new Guid("d1e45413-f67f-46c5-ac84-71881356c307"),
                            PermissionId = new Guid("56789012-5678-5678-5678-1234567890ab"),
                            RoleId = new Guid("34567890-3456-3456-3456-1234567890ab")
                        },
                        new
                        {
                            Id = new Guid("d619e786-fd3e-47e4-8866-a091db79f523"),
                            PermissionId = new Guid("67890123-6789-6789-6789-1234567890ab"),
                            RoleId = new Guid("34567890-3456-3456-3456-1234567890ab")
                        },
                        new
                        {
                            Id = new Guid("da63d420-8bce-44dc-b96f-da3f9e4bf1bc"),
                            PermissionId = new Guid("78901234-7890-7890-7890-1234567890ab"),
                            RoleId = new Guid("34567890-3456-3456-3456-1234567890ab")
                        },
                        new
                        {
                            Id = new Guid("fe965e49-84a3-4cc6-aed0-a1ea2ed39562"),
                            PermissionId = new Guid("89012345-8901-8901-8901-1234567890ab"),
                            RoleId = new Guid("34567890-3456-3456-3456-1234567890ab")
                        },
                        new
                        {
                            Id = new Guid("ffa3a3b3-3b3b-3b3b-3b3b-3b3b3b3b3b3b"),
                            PermissionId = new Guid("12345678-1234-1234-1234-1234567aaaab"),
                            RoleId = new Guid("34567890-3456-3456-3456-1234567890ab")
                        },
                        new
                        {
                            Id = new Guid("bbb1a8d2-4c5f-4b8e-9a2e-1f3b5d6a7c8e"),
                            PermissionId = new Guid("b3e1a8d2-4c5f-4b8e-9a2e-1f3b5d6a7c8e"),
                            RoleId = new Guid("34567890-3456-3456-3456-1234567890ab")
                        },
                        new
                        {
                            Id = new Guid("b3eeeed2-4c5f-4b8e-9a2e-1f3b5d6a7c8e"),
                            PermissionId = new Guid("b3eee8d2-4c5f-4b8e-9a2e-1f3b5d6a7c8e"),
                            RoleId = new Guid("34567890-3456-3456-3456-1234567890ab")
                        },
                        new
                        {
                            Id = new Guid("b3eeeed2-4454-4b8e-9a2e-1f3b5d6a7c8e"),
                            PermissionId = new Guid("b3eee8dd-4c5f-4b8e-9a2e-1f3b5d6a7c8e"),
                            RoleId = new Guid("34567890-3456-3456-3456-1234567890ab")
                        },
                        new
                        {
                            Id = new Guid("e3b0c442-98fc-1c14-9ddf-4b6e6e6e6e6e"),
                            PermissionId = new Guid("d2f1e8a4-3b6e-4b8e-9a2e-1f3b5d6a7c8e"),
                            RoleId = new Guid("34567890-3456-3456-3456-1234567890ab")
                        },
                        new
                        {
                            Id = new Guid("08129fcb-bb32-4440-aaaa-daf74040c137"),
                            PermissionId = new Guid("11111111-1111-1111-1111-1234567890ab"),
                            RoleId = new Guid("45678901-4567-4567-4567-123456789aab")
                        },
                        new
                        {
                            Id = new Guid("0b66a103-82fe-4b3c-aaaa-e7c09f9ff094"),
                            PermissionId = new Guid("22222222-2222-2222-2222-1234567890ab"),
                            RoleId = new Guid("45678901-4567-4567-4567-123456789aab")
                        },
                        new
                        {
                            Id = new Guid("10af3fc3-7a3f-4c21-aaaa-2e15f231caf3"),
                            PermissionId = new Guid("33333333-3333-3333-3333-1234567890ab"),
                            RoleId = new Guid("45678901-4567-4567-4567-123456789aab")
                        },
                        new
                        {
                            Id = new Guid("13fbcb26-eccc-41cb-aaaa-203c8039aeab"),
                            PermissionId = new Guid("44444444-4444-4444-4444-1234567890ab"),
                            RoleId = new Guid("45678901-4567-4567-4567-123456789aab")
                        },
                        new
                        {
                            Id = new Guid("5030f84f-e0fb-43ba-aaaa-3363dccf213d"),
                            PermissionId = new Guid("55555555-5555-5555-5555-1234567890ab"),
                            RoleId = new Guid("45678901-4567-4567-4567-123456789aab")
                        },
                        new
                        {
                            Id = new Guid("9f407a6c-95c2-4fee-aaaa-4a8aeb8181e9"),
                            PermissionId = new Guid("99999999-9999-9999-9999-1234567890ab"),
                            RoleId = new Guid("45678901-4567-4567-4567-123456789aab")
                        },
                        new
                        {
                            Id = new Guid("a01983cf-6fc8-479f-aaaa-7c0647e9cd5f"),
                            PermissionId = new Guid("12345678-1234-1234-1234-1234567890ab"),
                            RoleId = new Guid("45678901-4567-4567-4567-123456789aab")
                        },
                        new
                        {
                            Id = new Guid("a6a4097e-eb63-41ba-aaaa-c7df777e3218"),
                            PermissionId = new Guid("23456789-2345-2345-2345-1234567890ab"),
                            RoleId = new Guid("45678901-4567-4567-4567-123456789aab")
                        },
                        new
                        {
                            Id = new Guid("b65f7a2f-a549-4fa2-aaaa-d6e073707ded"),
                            PermissionId = new Guid("34567890-3456-3456-3456-1234567890ab"),
                            RoleId = new Guid("45678901-4567-4567-4567-123456789aab")
                        },
                        new
                        {
                            Id = new Guid("d03f54ec-1562-4c3f-aaaa-02da0fb8d2f3"),
                            PermissionId = new Guid("45678901-4567-4567-4567-1234567890ab"),
                            RoleId = new Guid("45678901-4567-4567-4567-123456789aab")
                        },
                        new
                        {
                            Id = new Guid("d1e45413-f67f-46c5-aaaa-71881356c307"),
                            PermissionId = new Guid("56789012-5678-5678-5678-1234567890ab"),
                            RoleId = new Guid("45678901-4567-4567-4567-123456789aab")
                        },
                        new
                        {
                            Id = new Guid("d619e786-fd3e-47e4-aaaa-a091db79f523"),
                            PermissionId = new Guid("67890123-6789-6789-6789-1234567890ab"),
                            RoleId = new Guid("45678901-4567-4567-4567-123456789aab")
                        },
                        new
                        {
                            Id = new Guid("da63d420-8bce-44dc-aaaa-da3f9e4bf1bc"),
                            PermissionId = new Guid("78901234-7890-7890-7890-1234567890ab"),
                            RoleId = new Guid("45678901-4567-4567-4567-123456789aab")
                        },
                        new
                        {
                            Id = new Guid("fe965e49-84a3-4cc6-aaaa-a1ea2ed39562"),
                            PermissionId = new Guid("89012345-8901-8901-8901-1234567890ab"),
                            RoleId = new Guid("45678901-4567-4567-4567-123456789aab")
                        },
                        new
                        {
                            Id = new Guid("ffa3a3b3-3b3b-3b3b-aaaa-3b3b3b3b3b3b"),
                            PermissionId = new Guid("12345678-1234-1234-1234-1234567aaaab"),
                            RoleId = new Guid("45678901-4567-4567-4567-123456789aab")
                        },
                        new
                        {
                            Id = new Guid("bbb1a8d2-4c5f-4b8e-aaaa-1f3b5d6a7c8e"),
                            PermissionId = new Guid("b3e1a8d2-4c5f-4b8e-9a2e-1f3b5d6a7c8e"),
                            RoleId = new Guid("45678901-4567-4567-4567-123456789aab")
                        },
                        new
                        {
                            Id = new Guid("b3eeeed2-4c5f-4b8e-aaaa-1f3b5d6a7c8e"),
                            PermissionId = new Guid("b3eee8d2-4c5f-4b8e-9a2e-1f3b5d6a7c8e"),
                            RoleId = new Guid("45678901-4567-4567-4567-123456789aab")
                        },
                        new
                        {
                            Id = new Guid("b3eeeed2-4454-4b8e-aaaa-1f3b5d6a7c8e"),
                            PermissionId = new Guid("b3eee8dd-4c5f-4b8e-9a2e-1f3b5d6a7c8e"),
                            RoleId = new Guid("45678901-4567-4567-4567-123456789aab")
                        },
                        new
                        {
                            Id = new Guid("f47ac10b-58cc-4372-aaaa-0e02b2c3d479"),
                            PermissionId = new Guid("d2f1e8a4-3b6e-4b8e-9a2e-1f3b5d6a7c8e"),
                            RoleId = new Guid("45678901-4567-4567-4567-123456789aab")
                        },
                        new
                        {
                            Id = new Guid("5ee2f16e-8c00-494a-cccc-ca24e354ec35"),
                            PermissionId = new Guid("66666666-6666-6666-6666-1234567890ab"),
                            RoleId = new Guid("41111111-4567-4567-4567-123456789aab")
                        },
                        new
                        {
                            Id = new Guid("8bd3fb56-6430-48e1-cccc-8b6fcd7f6544"),
                            PermissionId = new Guid("77777777-7777-7777-7777-1234567890ab"),
                            RoleId = new Guid("41111111-4567-4567-4567-123456789aab")
                        },
                        new
                        {
                            Id = new Guid("9f407a6c-95c2-4fee-cccc-4a8aeb8181e9"),
                            PermissionId = new Guid("99999999-9999-9999-9999-1234567890ab"),
                            RoleId = new Guid("41111111-4567-4567-4567-123456789aab")
                        },
                        new
                        {
                            Id = new Guid("a01983cf-6fc8-479f-cccc-7c0647e9cd5f"),
                            PermissionId = new Guid("12345678-1234-1234-1234-1234567890ab"),
                            RoleId = new Guid("41111111-4567-4567-4567-123456789aab")
                        },
                        new
                        {
                            Id = new Guid("a6a4097e-eb63-41ba-cccc-c7df777e3218"),
                            PermissionId = new Guid("23456789-2345-2345-2345-1234567890ab"),
                            RoleId = new Guid("41111111-4567-4567-4567-123456789aab")
                        },
                        new
                        {
                            Id = new Guid("b65f7a2f-a549-4fa2-cccc-d6e073707ded"),
                            PermissionId = new Guid("34567890-3456-3456-3456-1234567890ab"),
                            RoleId = new Guid("41111111-4567-4567-4567-123456789aab")
                        },
                        new
                        {
                            Id = new Guid("d03f54ec-1562-4c3f-cccc-02da0fb8d2f3"),
                            PermissionId = new Guid("45678901-4567-4567-4567-1234567890ab"),
                            RoleId = new Guid("41111111-4567-4567-4567-123456789aab")
                        },
                        new
                        {
                            Id = new Guid("d1e45413-f67f-46c5-cccc-71881356c307"),
                            PermissionId = new Guid("56789012-5678-5678-5678-1234567890ab"),
                            RoleId = new Guid("41111111-4567-4567-4567-123456789aab")
                        },
                        new
                        {
                            Id = new Guid("d619e786-fd3e-47e4-cccc-a091db79f523"),
                            PermissionId = new Guid("67890123-6789-6789-6789-1234567890ab"),
                            RoleId = new Guid("41111111-4567-4567-4567-123456789aab")
                        },
                        new
                        {
                            Id = new Guid("da63d420-8bce-44dc-cccc-da3f9e4bf1bc"),
                            PermissionId = new Guid("78901234-7890-7890-7890-1234567890ab"),
                            RoleId = new Guid("41111111-4567-4567-4567-123456789aab")
                        },
                        new
                        {
                            Id = new Guid("fe965e49-84a3-4cc6-cccc-a1ea2ed39562"),
                            PermissionId = new Guid("89012345-8901-8901-8901-1234567890ab"),
                            RoleId = new Guid("41111111-4567-4567-4567-123456789aab")
                        },
                        new
                        {
                            Id = new Guid("ffa3a3b3-3b3b-3b3b-cccc-3b3b3b3b3b3b"),
                            PermissionId = new Guid("12345678-1234-1234-1234-1234567aaaab"),
                            RoleId = new Guid("41111111-4567-4567-4567-123456789aab")
                        },
                        new
                        {
                            Id = new Guid("bbb1a8d2-4c5f-4b8e-cccc-1f3b5d6a7c8e"),
                            PermissionId = new Guid("b3e1a8d2-4c5f-4b8e-9a2e-1f3b5d6a7c8e"),
                            RoleId = new Guid("41111111-4567-4567-4567-123456789aab")
                        },
                        new
                        {
                            Id = new Guid("b3eeeed2-4c5f-4b8e-cccc-1f3b5d6a7c8e"),
                            PermissionId = new Guid("b3eee8d2-4c5f-4b8e-9a2e-1f3b5d6a7c8e"),
                            RoleId = new Guid("41111111-4567-4567-4567-123456789aab")
                        },
                        new
                        {
                            Id = new Guid("b3eeeed2-4454-4b8e-cccc-1f3b5d6a7c8e"),
                            PermissionId = new Guid("b3eee8dd-4c5f-4b8e-9a2e-1f3b5d6a7c8e"),
                            RoleId = new Guid("41111111-4567-4567-4567-123456789aab")
                        },
                        new
                        {
                            Id = new Guid("a1b2c3d4-e5f6-7890-cccc-ef1234567890"),
                            PermissionId = new Guid("d2f1e8a4-3b6e-4b8e-9a2e-1f3b5d6a7c8e"),
                            RoleId = new Guid("41111111-4567-4567-4567-123456789aab")
                        });
                });

            modelBuilder.Entity("SmartHome.BusinessLogic.Domain.SmartDevices.Camera", b =>
                {
                    b.HasBaseType("SmartHome.BusinessLogic.Domain.SmartDevices.SmartDevice");

                    b.Property<bool>("HasExternalUse")
                        .HasColumnType("bit");

                    b.Property<bool>("HasInternalUse")
                        .HasColumnType("bit");

                    b.Property<bool>("MotionDetection")
                        .HasColumnType("bit");

                    b.Property<bool>("PersonDetection")
                        .HasColumnType("bit");

                    b.HasDiscriminator().HasValue("Camera");
                });

            modelBuilder.Entity("SmartHome.BusinessLogic.Domain.Company", b =>
                {
                    b.HasOne("SmartHome.BusinessLogic.Domain.User", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("SmartHome.BusinessLogic.Domain.EFCoreClasses.HomeMemberNotification", b =>
                {
                    b.HasOne("SmartHome.BusinessLogic.Domain.HomeManagement.HomeMember", "HomeMember")
                        .WithMany()
                        .HasForeignKey("HomeMemberId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SmartHome.BusinessLogic.Domain.Notification", "Notification")
                        .WithMany()
                        .HasForeignKey("NotificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("HomeMember");

                    b.Navigation("Notification");
                });

            modelBuilder.Entity("SmartHome.BusinessLogic.Domain.EFCoreClasses.MemberHomePermission", b =>
                {
                    b.HasOne("SmartHome.BusinessLogic.Domain.HomeManagement.HomeMember", "Member")
                        .WithMany()
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartHome.BusinessLogic.Domain.HomeManagement.HomePermission", "Permission")
                        .WithMany()
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Member");

                    b.Navigation("Permission");
                });

            modelBuilder.Entity("SmartHome.BusinessLogic.Domain.HomeManagement.Home", b =>
                {
                    b.HasOne("SmartHome.BusinessLogic.Domain.User", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("SmartHome.BusinessLogic.Domain.HomeManagement.HomeDevice", b =>
                {
                    b.HasOne("SmartHome.BusinessLogic.Domain.SmartDevices.SmartDevice", "Device")
                        .WithMany("HomeDevices")
                        .HasForeignKey("DeviceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SmartHome.BusinessLogic.Domain.HomeManagement.Home", "Home")
                        .WithMany("Devices")
                        .HasForeignKey("HomeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartHome.BusinessLogic.Domain.HomeManagement.Room", "Room")
                        .WithMany("Devices")
                        .HasForeignKey("RoomId");

                    b.Navigation("Device");

                    b.Navigation("Home");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("SmartHome.BusinessLogic.Domain.HomeManagement.HomeMember", b =>
                {
                    b.HasOne("SmartHome.BusinessLogic.Domain.HomeManagement.Home", "Home")
                        .WithMany("Members")
                        .HasForeignKey("HomeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartHome.BusinessLogic.Domain.User", "User")
                        .WithMany("HomeMembers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Home");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SmartHome.BusinessLogic.Domain.HomeManagement.Room", b =>
                {
                    b.HasOne("SmartHome.BusinessLogic.Domain.HomeManagement.Home", "Home")
                        .WithMany("Rooms")
                        .HasForeignKey("HomeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Home");
                });

            modelBuilder.Entity("SmartHome.BusinessLogic.Domain.Notification", b =>
                {
                    b.HasOne("SmartHome.BusinessLogic.Domain.HomeManagement.HomeDevice", "HomeDevice")
                        .WithMany()
                        .HasForeignKey("HomeDeviceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("HomeDevice");
                });

            modelBuilder.Entity("SmartHome.BusinessLogic.Domain.Session", b =>
                {
                    b.HasOne("SmartHome.BusinessLogic.Domain.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("SmartHome.BusinessLogic.Domain.SmartDevices.DeviceImage", b =>
                {
                    b.HasOne("SmartHome.BusinessLogic.Domain.SmartDevices.SmartDevice", null)
                        .WithMany("Images")
                        .HasForeignKey("SmartDeviceId");
                });

            modelBuilder.Entity("SmartHome.BusinessLogic.Domain.SmartDevices.SmartDevice", b =>
                {
                    b.HasOne("SmartHome.BusinessLogic.Domain.Company", "CompanyOwner")
                        .WithMany()
                        .HasForeignKey("CompanyOwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CompanyOwner");
                });

            modelBuilder.Entity("SmartHome.BusinessLogic.Domain.User", b =>
                {
                    b.HasOne("SmartHome.BusinessLogic.Domain.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("SmartHome.DataAccess.EFCoreClasses.RoleSystemPermission", b =>
                {
                    b.HasOne("SmartHome.BusinessLogic.Domain.SystemPermission", "Permission")
                        .WithMany()
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartHome.BusinessLogic.Domain.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("SmartHome.BusinessLogic.Domain.HomeManagement.Home", b =>
                {
                    b.Navigation("Devices");

                    b.Navigation("Members");

                    b.Navigation("Rooms");
                });

            modelBuilder.Entity("SmartHome.BusinessLogic.Domain.HomeManagement.Room", b =>
                {
                    b.Navigation("Devices");
                });

            modelBuilder.Entity("SmartHome.BusinessLogic.Domain.SmartDevices.SmartDevice", b =>
                {
                    b.Navigation("HomeDevices");

                    b.Navigation("Images");
                });

            modelBuilder.Entity("SmartHome.BusinessLogic.Domain.User", b =>
                {
                    b.Navigation("HomeMembers");
                });
#pragma warning restore 612, 618
        }
    }
}
